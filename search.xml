<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019年4月北邮人论坛十大热门贴.md]]></title>
    <url>%2F2019%2F04%2F10%2F2019%E5%B9%B44%E6%9C%88%E5%8C%97%E9%82%AE%E4%BA%BA%E8%AE%BA%E5%9D%9B%E5%8D%81%E5%A4%A7%E7%83%AD%E9%97%A8%E8%B4%B4%2F</url>
    <content type="text"><![CDATA[2019年4月10日 2019年4月10日 sandywu出来回应一下（更新）？ 【讨论】咨询一下北京的教育问题！！ 女生需要主动去联系男生吗？ 有愿意收养小串串的吗（这都能shida…） 【问题】校招新人求建议，刚入职恐慌期应该怎么办啊？ 本校各专业考本校研究生上岸的比例 话说有人和我一样腾讯做完笔试是一直未发起面试吗？ 如何看待浙大撤销通信工程专业？ 有在北邮的大连人吗？ 4.20-5.1以色列约旦]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Legacy BIOS引导流程详解]]></title>
    <url>%2F2019%2F03%2F11%2FLegacy-BIOS%E5%BC%95%E5%AF%BC%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[虽然传统BIOS（Legacy BIOS）已经逐渐被UEFI BIOS取代，但是对传统BIOS的深入了解，也将有助于我们更好地理解UEFI BIOS、了解Linux的设计理念。在下文中我们将传统BIOS直接简称为BIOS。 概述 下图为BIOS的引导流程。 在系统首次被引导或者重置时，处理器会首先执行一段位置已知的代码。通常这段代码保存在基本输入/输出系统（BIOS，Basic Input/Output System）中，或者由CPU调用重置向量来进行寻址。 在找到引导设备后，第一阶段的引导加载程序（Boot Loader）就被装入RAM执行。第一阶段引导加载程序的主要作用是找到第二阶段的引导加载程序。 第二阶段的引导加载程序被执行时，会显示用户界面，从命令行到GUI各式各样，并将Linux内核和可选的初始RAM磁盘（initrd）加载到内存。第二阶段的控制权会被交给内核，然后由内核进行解压和初始化。在这个阶段中，第二阶段的引导加载程序会检测系统硬件、枚举系统链接的硬件设备、挂载根设备，然后加载必要的内核模块。 然后启动第一个用户空间程序-init，并执行高级系统初始化工作。 系统启动 在PC平台引导时，BIOS的第一步是加电自检（Power On Self Test，POST），对硬件进行检测，用于检查设备是否良好。 然后是初始化，包括创建中断向量、设置寄存器、对外部设备的初始化和检测。 最后对本地设备的枚举，用以寻找引导设备，BIOS 运行时会按照 CMOS 的设置定义的顺序来搜索处于活动状态并且可以引导的设备。引导设备可以是软盘、CD-ROM、硬盘上的某个分区、网络上的某个设备，甚至是 USB 闪存。当检测到有引导设备满足要求后，BIOS将控制权交给相应引导设备。 引导加载程序 由于BIOS只能访问很少的数据量，所以大部分引导加载程序分为两个阶段。在引导的第一阶段中，BIOS引导一部分引导加载程序，即初始程序加载程序（Initial Program loader，IPL）。IPL查询分区表，从而加载位于不同介质上的数据，进而定位第二阶段的引导加载程序，最终将控制权交给后者。 第二阶段的引导加载程序通常被认为是引导加载程序的主体，它负责用户界面和内核引导等重要功能。 我们将第一阶段的引导加载程序称为主引导加载程序，将第二阶段的引导加载程序称为次引导加载程序。 第一阶段引导加载程序 通常情况下，Linux是从硬盘上的主引导记录（Master Boot Record，MBR）中存放的引导加载程序开始引导的。 MBR是一个512字节大小的扇区，位于磁盘的第一个扇区中，每块硬盘都有一个MBR，它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。其中包含程序代码和一个分区表。MBR分区结构如下图所示。 启动代码区：前446字节是是主引导加载程序，包括可执行代码和错误消息文本（有时也将开头的前446字节称作MBR，但在本文中我们还是将前512字节称作MBR），代码主要功能是检查分区表是否有效，以及查找并加载次引导加载程序（如LILO、GRUB等），并转交控制权。 ​ 它先查找活动的主分区，并检查其他分区，确保该分区是唯一活动的主分区，其他分区都是不活动的，然后将该分区的引导记录从设备读入RAM并执行。这个过程不依赖于任何操作系统，且启动代码也是可以改变的，因而可以实现多系统引导。如果将一个操作系统单独地安装到逻辑分区上，是无法引导的，但如果作为双系统的话，是可以将第二个系统放到逻辑分区上。 硬盘分区表（Disk Partition Table， DPT）：然后是64字节的分区表，包含4个分区的记录，每条记录16字节，包含分区的状态、起始结束的地址、相对扇区号、总扇区数等信息。分区结构信息表如下图所示。 由于每条分区记录都只有16字节，所以磁盘的分区也变得很受限制。分区的相对扇区号和扇区数都只有4字节，这就限制了MBR型分区结构的硬盘大小只能控制在2TB（232×512 ＝ 2,199,023,255,552字节），受CHS寻址方式的限制，起始扇区也必须在前2TB内。 由于只预留了4条分区记录的空间，所以MBR型分区结构的硬盘只能识别4个主分区，这就引出了逻辑分区的概念，在本文中不再赘述。 结束标志字：最后MBR以两个特殊的数字字节0x55AA结束，用以检查MBR的有效性。 MBR结构就是由上述3个部分组成。其从系统启动阶段到读取流程如下： （1）BIOS加电自检。 （2）读取MBR。BIOS按照CMOS设置的顺序检测可用的启动设备，将启动设备的第一个扇区，也就是MBR扇区读入内存。 （3）检查MBR。BIOS检查MBR，检查包括结束标志位、是否有写保护等，如果当前设备不满足启动要求，则尝试下一个设备，重复（3）（4）。 （4）检测到有合适的启动设备时，BIOS移交控制权。启动设备的MBR将自己复制到内存中，然后继续执行MBR中的代码。 （5）根据MBR中的引导代码启动引导程序。 第二阶段引导加载程序 次引导加载程序是引导加载程序真正的核心部分，这个阶段的任务是加载Linux内核和可选的初始RAM磁盘。在 PC 环境中，第一阶段和第二阶段的引导加载程序一起称为 Linux Loader（LILO）或 GRand Unified Bootloader（GRUB）。GRUB克服了LILO的诸多缺点，所以在这里只研究GRUB。 在MBR中。引导代码最多只能占446字节，这对于像LILO、GRUB这种复杂的引导程序来说就显得太小，所以这里用到了多级引导的概念。 Stage 1 将GRUB安装到MBR时，实际上只是将GRUB的stage 1（第一阶段引导加载程序）放入了MBR的代码区，Stage 1的任务是通过加载磁盘起始处附近从一个固定地址开始的一些扇区来加载GRUB的下一阶段，即stage 1.5或stage 2。 Stage 1.5 Stage 1.5是stage 1和stage 2的中间桥梁。Stage 1.5包含在MBR后的30千字节中，stage 1.5的作用是加载stage 2。Stage 1.5包含了具体的文件系统驱动，该驱动允许stage 1.5直接加载位于文件系统/boot/grub下的stage 2，将后者装入内存并执行。 Stage 2 Stage 2加载配置文件，根据配置文件，选择性地呈现一个界面让用户选择要启动的操作系统内核。用户可以选择启动内核甚至修改附加内核参数，也可以使用命令行对引导过程进行手动控制。选择完成后，会加载内核映像和initrd映像到内存中。然后GRUB将控制权转交给内核，其工作至此也完成。 内核 内核被加载到内存，GRUB将控制权释放后，内核阶段就开始了。 内核映像不是一个可执行的内核，而是一个压缩过的内核映像，它的格式通常是zImage（小于512KB，适用于小内核）或bzImage（Big zImage，大于512KB，适用于大内核）。 内核映像的前面是一个例程，它实现少量硬件设置，并对内核映像中包含的内核（注意区分内核映像和内核）进行解压，然后将其放入高端内存中，如果有初始 RAM 磁盘映像，就会将它移动到内存中，并标明以后使用。然后该例程会调用内核，并开始启动内核引导的过程。 在引导过程中，初始RAM磁盘（initrd）是在stage 2中被加载到内存中的，它会被复制到RAM并被挂载到系统上。这个initrd会作为RAM中的临时根文件系统使用，允许内核在没有挂载任何物理磁盘的情况下完整地实现引导。initrd的最初的目的是为了把内核的引导分成两个阶段：在内核中保留最少最基本的引导代码，然后把对各种各样硬件设备的支持以模块的方式放在initrd中，这样就在启动过程中可以initrd临时根文件系统中装载需要的模块。这样的一个好处就是在保持内核不变的情况下，通过修改initrd中的内容就可以灵活的支持不同的硬件，而不需要每次都重新编译内核，因而内核可以做到非常小。 在内核引导完成之后，initrd根文件系统将会被卸载，并挂载真正的根文件系统。 Init 当内核被引导和进行初始化之后，内核就可以启动自己的第一个用户态程序了。在多数Linux中，这个程序通常是/sbin/init。由init开始，计算机就进入了系统初始化阶段。在系统初始化的方法繁多，但已经不在本文的研究范畴了。 最后附上一张个人认为比较完整的Linux系统启动流程图（出处）。 参考： Linux 引导过程内幕 主引导记录 - 维基百科，自由的百科全书 引导加载程序之争：了解 LILO 和 GRUB Linux启动流程和grub详解-家住海边喜欢浪-51CTO博客 Grub 加载系统的三个阶段 - 团子的小窝]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>BIOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell脚本命令行参数解析工具：getopts]]></title>
    <url>%2F2019%2F03%2F10%2FShell%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%EF%BC%9Agetopts%2F</url>
    <content type="text"><![CDATA[在处理bash脚本时，简单参数可以用$1、$2来处理，遇到需要分析复杂参数的时候，bash内建命令getopts就是一个不错的选择（也可以使用独立的可执行文件getopt）。 getopts是一个强大的选项解析工具，使用简单，支持选项连接（rsync -av型式），但是不支持长选项（vim --help型式）。 getopts工作方式 通常getopts被使用在while do语句中顺序解析参数。当遇到 不以-开头的选项 -- 会异常中断解析（如果遇到--help型式的参数会按照选项-、h、e、l、p处理）。 getopts变量 OPTARG：当前选项的参数值，如果选项解析失败，则存储的是未识别选项的名字。 OPTIND：接下来要解析的选项的位置 getopts用法 在bash中通常将getopts放在while中使用 12345678910111213while getopts "OPTSTRING" TEMP_OPT_VAR; do case $TEMP_OPT_VAR in OPT1) ... ;; OPT2) ... ;; :) #选项需要参数，但没有读取到时 ... ;; ?) #选项不能识别时 ... ;; ... esacdone 其中： OPTSTRING：通过OPTSTRING可以告诉getopts哪些选项是合法的，哪些选项是需要参数的，以及遇到不能识别的参数时是否需要打印提示信息（./test.sh: option requires an argument – a）。这些功能都是通过冒号:完成的。 字符串首位如果出现:则表示不打印错误信息。 选项名字后的:表示该选项需要参数。 例如： OPTSTRING是&quot;​:a​:bc&quot;时，表示不打印未识别提示信息，有a、b、c三个选项，a需要参数。 TEMP_OPT_VAR：暂存读取到的选项，后续case需要使用。 getopts使用实例 12345678910111213141516#!/bin/bashwhile getopts ":a:bc" OPT; do case $OPT in a) echo "Next pos is $OPTIND, a is arg:$OPTARG" ;; b) echo "Next pos is $OPTIND, b is triggered" ;; c) echo "Next pos is $OPTIND, c is triggered" ;; :) echo "Option $OPTARG needs argument" ;; ?) echo "Unknown option $OPTARG" ;; esacdone 在这段代码中，设置不打印未识别信息，有abc三个选项，其中a需要参数。 （1）正确使用 12345678$ ./test.sh -b -c -a 123Next pos is 2, b is triggeredNext pos is 3, c is triggeredNext pos is 5, a is arg:123$ ./test.sh -a 123 -b -cNext pos is 3, a is arg:123Next pos is 4, b is triggeredNext pos is 5, c is triggered 在第一次执行时，先读取b，此时OPTIND的值为2，表示接下来要读取第2个，也就是c。当读取a并且读取了a的值123后，OPTIND值为5，此时就可以结束解析过程了。 （2）选项不合法 12$ ./test.sh -dUnknown option d （3）选项合法，缺少参数 12$ ./test.sh -aOption a needs argument （4）选项、参数合法，读取顺序错误 123456$ ./test.sh -bca 123Next pos is 1, b is triggeredNext pos is 1, c is triggeredNext pos is 3, a is arg:123$ ./test.sh -bac 123Next pos is 1, b is triggered 在这一组中，观察到读取完b和c，OPTIND的值并没有变化，说明bash中OPTIND的增加是以空格为分隔符计算的，并不是选项的个数。 （5）使用--的情况 1234$ ./test.sh --bcUnknown option -Next pos is 1, b is triggeredNext pos is 2, c is triggered 由此可见，使用--接选项时，除了第一个-，后续的字符都会被解析。 参考： 在 Shell 脚本中解析选项 | 始终 bash/shell 解析命令行参数工具：getopts/getopt - leejun2005的个人页面 - 开源中国]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Proxmox VE镜像分析与定制]]></title>
    <url>%2F2019%2F03%2F07%2FProxmox-VE%E9%95%9C%E5%83%8F%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9A%E5%88%B6%2F</url>
    <content type="text"><![CDATA[Proxmox VE（Proxmox Virtual Environment，简称PVE）是一个开源的服务器虚拟化环境Linux发行版，基于Debian，使用给予Ubuntu的定制内核。相比于其他虚拟化平台，PVE具有的一个显著的特点就是无需master节点，安装完成后，无需特殊配制即可将多个节点组成集群。 由于工程要求，PVE需要大规模部署在物理服务器上，所以定制镜像就显得很有必要。 定制目标包括 （1）修改initrd中init脚本的提示信息 （2）删除GRUB界面多余选项，直接进入安装界面 （3）添加预装软件 （4）在安装过程中对软件进行个性化配置 （5）修改PVE安装界面，在PVE安装界面中的所有输入框设置默认文本 Proxmox VE镜像分析 下载Proxmox VE 5.3版本镜像后挂载，观察文件结构 123456789101112131415161718192021222324252627$ tree -L 2.├── boot│ ├── boot.cat│ ├── grub│ ├── initrd.img│ ├── linux26│ └── memtest86+.bin├── COPYING├── COPYRIGHT├── debian -&gt; .├── dists│ └── stretch├── efi.img├── EULA├── mach_kernel├── proxmox│ ├── country.dat│ ├── packages│ └── pve-base.cnt├── pve-base.squashfs├── pve-installer.squashfs├── Release.txt└── System └── Library9 directories, 14 files 其中： grub文件夹：包含引导程序GRUB所用到的文件。 initrd.img：系统初始化所使用的镜像，里面包含一个最小化的系统，包含了/dev、/etc、/bin等很多基本的目录，还有关键的init程序，负责驱动的加载和文件系统的初始化。 linux26：Linux 2.6内核 efi.img：系统引导镜像，内含boot.efi、bootia32.efi、bootx64.efi。 proxmox文件夹：系统预安装包的存放目录 ​ PVE的根系统默认安装包是在proxmox文件夹下的，只要不破坏其依赖关系，可以将需要预安装的包及其依赖放到这个文件夹下。 ​ PVE预安装包时候使用的是循环读取proxmox/packages中的deb，然后使用的安装方法是先解压然后再配置，这样不会产生依赖关系而导致装不上deb的问题。 pve-base.squashfs：安装的根系统，也就是最终的系统 pve-installer.squashfs：安装时需要的系统 Proxmox VE安装流程 PVE安装流程主要分为以下4个步骤： （1）Boot Loader：由 BIOS 加载，用于将后续的 kernel 和 initrd 的装载到内存中。（PVE安装时使用的是UEFI模式的安装，但是又不是传统意义上的UEFI，它先是使用了BIOS加载kernel和initrd到内存，然后又跳到UEFI分区执行efi.img文件，调用proxinstall进入到系统安装界面，然后是挂载pve-base.squashfs进行系统安装） （2）kernel：为 initrd 运行提供基础的运行环境，对应boot目录下的linux26文件 （3）initrd：检测并加载各种驱动程序，并执行init，对应boot目录下的initrd.img文件 （4）rootfs：根文件系统，用户的各种操作都是基于这个被最后加载的文件系统，这里对应了pve-base.squashfs 123456789st=&gt;start: Startuefi=&gt;operation: UEFIbl=&gt;operation: Boot LoaderloadKernel=&gt;operation: 加载kernelinitrd=&gt;operation: 初始化initrdinstaller=&gt;operation: pve-installer.squashfsbase=&gt;operation: pve-base.squashfse=&gt;endst-&gt;uefi-&gt;bl-&gt;loadKernel-&gt;initrd-&gt;installer-&gt;base-&gt;e Proxmox VE镜像定制 ISO解压与压缩 使用ISO Master。 在原先使用ISO Master作为解压缩ISO的工具中，产生的ISO文件可以直接作为cdrom启动，但刻录进USB设备后缺失MBR等重要部分所以无法启动，因此改用命令行进行解压缩。 （1）ISO提取 首先挂载镜像文件。 1$ mount -o loop $ISO_NAME $PVE_MNT_PATH 挂载点目录中的文件是只读的，所以需要同步到工作目录下。 12$ cd $PVE_MNT_PATH$ rsync -av . $PVE_ISO_PATH &gt; /dev/null 同步之后就即可修改ISO内的文件。 12$ cd $PVE_ISO_PATH$ umount $PVE_MNT_PATH （2）ISO压缩 使用原镜像的MBR（前512字节）作为定制镜像的MBR 1$ dd if=proxmox-ve_5.4-1.iso bs=512 count=1 of=proxmox.mbr 打包ISO 1$ xorriso -as mkisofs -o ../$MY_ISO -r -V 'inspur' --grub2-mbr ../proxmox.mbr --protective-msdos-label -efi-boot-part --efi-boot-image -c '/boot/boot.cat' -b '/boot/grub/i386-pc/eltorito.img' -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info -eltorito-alt-boot -e '/efi.img' -no-emul-boot . 修改initrd initrd.img位于原始镜像的boot目录下，修改initrd的目的是修改安装过程中的输出文本，是一个比较特殊的部分，要从initrd引入的目的讲起。 initrd 的英文含义是 boot loader initialized RAM disk，就是由 boot loader 初始化的内存盘。initrd的最初的目的是为了把kernel的启动分成两个阶段：在kernel中保留最少最基本的启动代码，然后把对各种各样硬件设备的支持以模块的方式放在initrd中，这样就在启动过程中可以从initrd所mount的根文件系统中装载需要的模块。这样的一个好处就是在保持kernel不变的情况下，通过修改initrd中的内容就可以灵活的支持不同的硬件。在启动完成的最后阶段，根文件系统可以重新mount到其他设备上。也就是说由于initrd会在内存虚拟一个文件系统，然后可以根据不同的硬件加载不同的驱动，而不需要重新编译整个核心。所以，大部分的发行版都会通过这种方式对驱动进行加载。 initrd引入之后Linux的引导会变成如下流程。 （1）boot loader 把内核以及 initrd 文件加载到内存的特定位置。 ​（2）内核判断initrd的文件格式，如果是cpio格式。 ​（3）将initrd的内容释放到rootfs中。 ​（4）执行initrd中的/init文件，执行到这一点，内核的工作全部结束，完全交给/init文件处理。 根据核心版本的不同，initrd文件有两种格式：image和cpio。**kernel 2.4只使用image格式，而kernel 2.6可同时支持两种格式。**它们不单格式不一样，而且运作的机制和流程也完全不同，甚至制作方法也不一样。pve的kernel版本是2.6，所以在此只讲cpio格式的initrd制作。 initrd解压、修改与压缩流程： （1）解压proxmox-ve_5.3-1.iso，boot目录下的initrd.img就是gz格式的压缩文件 （2）将initrd.img备份后重命名为initrd.org.img，并解压缩 1$ gzip -d -S ".img" ./initrd.org.img 执行file后查看格式 12$ file initrd.orginitrd.org: ASCII cpio archive (SVR4 with no CRC) （3）创建initrd.tmp目录以存放后续还原出来的文件，然后执行cpio命令将文件还原 123$ mkdir initrd.tmp$ cd initrd.tmp$ cpio -id &lt; ../initrd.org （4）ls查看文件 1234567891011121314151617total 96drwxr-xr-x 13 root root 4096 Dec 24 15:26 ./dr-xr-xr-x 4 helong helong 4096 Dec 24 15:49 ../drwxr-xr-x 2 root root 4096 Dec 24 12:14 bin/drwxr-xr-x 8 root root 36864 Dec 24 12:14 dev/drwxr-xr-x 2 root root 4096 Dec 24 12:14 devfs/drwxr-xr-x 2 root root 4096 Dec 24 12:14 etc/-rwxr-xr-x 1 root root 8051 Dec 24 15:26 init*drwxr-xr-x 6 root root 4096 Dec 24 12:14 lib/lrwxrwxrwx 1 root root 3 Dec 24 12:14 lib64 -&gt; lib/drwxr-xr-x 2 root root 4096 Dec 24 12:14 mnt/drwxr-xr-x 2 root root 4096 Dec 24 12:14 proc/-rw-r--r-- 1 root root 37 Dec 24 12:14 .pve-cd-id.txtdrwxr-xr-x 2 root root 4096 Dec 24 15:29 sbin/drwxr-xr-x 2 root root 4096 Dec 24 12:14 sys/drwxr-xr-x 2 root root 4096 Dec 24 12:14 tmp/drwxr-xr-x 6 root root 4096 Dec 24 12:14 usr/ （5）编辑init （6）更改后，使用cpio重新压缩 1$ find . | cpio -H newc -o &gt; ../initrd （7）gzip压缩initrd 1$ gzip -9 -S ".img" initrd 去除GRUB界面 pve在安装时使用了GRUB2，所以想要去除掉GRUB界面需要找到原始镜像中boot/grub/grub.cfg文件，添加set timeout=0，就可以直接进入默认选项Install Proxmox VE模式。如果有需要我们也可以修改默认选项来实现直接进入其他模式的功能。 定制预装软件 Proxmox VE所有的预装软件都以deb包的形式存放在镜像的proxmox/packages下，并将在安装pve的过程中统一安装这些软件包，全部安装完成之后再进行配置，这样可以避免依赖关系出现问题。 所以定制预装软件只需要在proxmox/packages目录下放入需要的deb包，pve将会自动安装并进行默认配置。 配置预装程序 ​ pve在配置软件是只会按照默认的配置，如果希望将软件配置成我们想要的形式，则只需要修改pve-installer.squashfs里的usr/bin/proxinstall文件。pve-installer.squashfs是pve安装时由initrd加载的系统，安装过程中proxinstall负责所有业务逻辑，其中配置软件部分的代码如下： 123456789101112# needed for postfix postinst in case no other NIC is activesyscmd("chroot $targetdir ifup lo");my $cmd = "chroot $targetdir dpkg $dpkg_opts --force-confold --configure -a";$count = 0; run_command ($cmd, sub &#123; my $line = shift; if ($line =~ m/Setting up\s+(\S+)/) &#123; update_progress ((++$count)/$pkg_count, 0.75, 0.95, "configuring $1"); &#125; &#125;); … 123456789101112# set apt mirrorif (my $mirror = $cmap-&gt;&#123;country&#125;-&gt;&#123;$country&#125;-&gt;&#123;mirror&#125;) &#123; my $fn = "$targetdir/etc/apt/sources.list"; syscmd ("sed -i 's/ftp\\.debian\\.org/$mirror/' '$fn'");&#125;# create extended_states for apt (avoid cron job warning if that# file does not exist)write_config ('', "$targetdir/var/lib/apt/extended_states");# allow ssh root loginsyscmd(['sed', '-i', 's/^#\?PermitRootLogin.*/PermitRootLogin yes/', "$targetdir/etc/ssh/sshd_config"]); 可以看出pve也是对部分程序进行了个性化的配置，所以对配置文件的编辑的代码只需要仿照后者，使用syscmd函数，将修改的命令作为参数，写在前者之后即可。 定制安装界面 在pve-installer.squashfs里的usr/bin/proxinstall文件中，有create_main_window函数，这个函数的功能是创建图形界面窗口里的各种组件，通过分析这个函数我们可以得到安装UI的结构。 顶部的image、中心的htmlview窗口以及下方的cmdbox构成了我们所看到的外观。在此只修改image和htmlview。 顶部的image是在1785行加载pve-installer下var/lib/pve-installer/pve-banner.png来完成的，所以只需要用一个尺寸同样为1024X164的图像替代。 中心的htmlview是通过在每个create_*函数中调用display_html函数来加载，加载的html文件都位于var/lib/pve-installer/html文件夹下，对应的只需要修改每个html文件就可以实现外观上的替换。 另外由于窗口运行环境openbox的语言设置默认不是中文，所以使用中文字符展示会出现乱码，因此可以由html加载含中文的图片，以此来展示中文。 默认输入信息的修改就只需要在proxinstall中找到对应的输入框，修改预设文本。 参考： Booting - Ubuntu Wiki custom pve iso | Proxmox Support Forum 定制 proxmox VE 4.4 ， 并制作安装镜像 - wangyezi19930928的专栏 - CSDN博客 proxmox:install_proxmox_ve_from_pxe [ICT Network Project] xorriso Document]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Proxmox VE</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
